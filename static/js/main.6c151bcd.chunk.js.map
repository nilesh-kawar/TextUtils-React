{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","e","alert","class","type","role","charAt","toUpperCase","substr","toLowerCase","message","Navbar","className","mode","href","title","onClick","toggleModeDark","id","homeText","toggleModeRed","toggleModeBlue","toggleModeGreen","toggleModeYellow","htmlFor","TextForm","useState","text","setText","heading","value","rows","onChange","event","target","style","backgroundColor","color","uppercase","showAlert","length","trim","split","defaultProps","aboutText","App","setAlert","setTimeout","setMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c151bcd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalCase = (e) => {\r\n        return e.charAt(0).toUpperCase() + e.substr(1).toLowerCase();\r\n    }\r\n\r\n    return (\r\n        props.alert && \r\n        <div>\r\n             <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalCase(props.alert.type)}: </strong> {props.alert.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode === 'light' ? props.mode : 'dark'} bg-${props.mode === 'light' ? props.mode : 'dark'}`}>   \r\n            <div className=\"container-fluid\">\r\n            {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            {/* mobile light dark mode  */}\r\n            <div className={`form-check form-switch mobile text-${props.mode === 'light' ? 'dark' : 'light' }`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleModeDark} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            </div>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse text-center\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.homeText}</Link> */}\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.homeText}</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                </li>\r\n                </ul>\r\n\r\n                <div className=\"colorPalletDiv\">\r\n                    <button className='mx-2 btn btn-danger colorPallet' onClick={props.toggleModeRed}></button>\r\n                    <button className='mx-2 btn btn-primary colorPallet' onClick={props.toggleModeBlue}></button>\r\n                    <button className='mx-2 btn btn-success colorPallet' onClick={props.toggleModeGreen}></button>\r\n                    <button className='mx-2 btn btn-warning colorPallet' onClick={props.toggleModeYellow}></button>\r\n                </div>\r\n                <div className={`form-check form-switch  desktop text-${props.mode === 'light' ? 'dark' : 'light' }`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleModeDark} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'light' ? 'Dark' : 'Light'} Mode</label>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </nav>\r\n        </div>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    homeText: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    homeText: 'Home text here',\r\n    aboutText: 'About text here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState('')\r\n    // text = \"change text value\" //Wrong way to change state\r\n    // setText(\"Change text value using setText\")   //Right way to chnage state\r\n\r\n    const handleUpClick = () => {\r\n        let uppercase = text.toUpperCase();\r\n        setText(uppercase)\r\n        props.showAlert(\"Text converted to UPPERCASE\", \"success\");\r\n        // console.log(\"Upper Case was clicked\");\r\n    }\r\n    const handleLowerClick = () => {\r\n        let uppercase = text.toLowerCase();\r\n        setText(uppercase)\r\n        props.showAlert(\"Text converted to LOWERCASE\", \"success\");\r\n    }\r\n    // const handleCapClick = () => {\r\n    //     let capLetters = [];\r\n    //     let words = text.split(\" \")\r\n    //     for (let i = 0; i < words.length; i++) {\r\n    //         capLetters[i] =  words[i][0].toUpperCase() + words[i].substr(1);\r\n    //     }\r\n    //     let res = capLetters.join(\" \")\r\n    //     setText(res)\r\n    //     console.log(res)\r\n    // }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n        // conso le.log(\"on chnge\");\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"mt-5 mb-2\">\r\n                    <h1 className=\"text-center\">Text Analyzer</h1>\r\n                    <h3 className=\"mb-3 mt-5\">{props.heading}</h3>\r\n                    <textarea className=\"form-control\" value={text} rows=\"8\" onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark' ? '#373c41' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }}></textarea>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <button className={`btn btn-${props.mode} mx-1 my-2`} onClick={handleUpClick}>Convert to UPPERCASE</button>\r\n                    <button className={`btn btn-${props.mode} mx-1 my-2`} onClick={handleLowerClick}>Convert to lowercase</button>\r\n                    {/* <button className=\"btn btn-primary\" onClick={handleCapClick}>Convert to Capitalize</button> */}\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h3 className=\"mt-5\">Your text summary</h3>\r\n                <p>{text.length > 0 ? text.trim().split(\" \").length : 0} words and {text.length} characters | {0.008 * text.split(\" \").length} Minutes read</p>\r\n                \r\n                <h3  className=\"mt-3\">Preview</h3>\r\n                <p>{text.length > 0 ? text : \"Enter something to textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message,type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const [mode, setMode] = useState('light')\n  const toggleModeDark = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#15191d'\n      document.body.style.color = '#fff'\n      showAlert(\"Dark mode is enabled\", \"success\")\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = '#eefaff'\n      document.body.style.color = '#000'\n      showAlert(\"Light mode is enabled\", \"success\")\n    }\n  }\n  const toggleModeBlue = () => {\n    setMode('primary')\n    document.body.style.backgroundColor = '#074b6a'\n    document.body.style.color = '#fff'\n    showAlert(\"Blue mode is enabled\", \"success\")\n  }\n  const toggleModeGreen = () => {\n    setMode('success')\n    document.body.style.backgroundColor = '#034a06'\n    document.body.style.color = '#fff'\n    showAlert(\"Green mode is enabled\", \"success\")\n  }\n  const toggleModeYellow = () => {\n    setMode('warning')\n    document.body.style.backgroundColor = '#bb9420'\n    document.body.style.color = '#fff'\n    showAlert(\"Green mode is enabled\", \"success\")\n  }\n  const toggleModeRed = () => {\n    setMode('danger')\n    document.body.style.backgroundColor = '#dd544a'\n    document.body.style.color = '#fff'\n    showAlert(\"Green mode is enabled\", \"success\")\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar \n        title=\"TextUtils\" \n        aboutText=\"About Us\" \n        homeText=\"Home\" \n        mode={mode} \n        toggleModeDark={toggleModeDark} \n        toggleModeBlue={toggleModeBlue}\n        toggleModeGreen={toggleModeGreen}\n        toggleModeYellow={toggleModeYellow}\n        toggleModeRed={toggleModeRed}\n      />\n      <Alert alert={alert} />\n      {/* <Routes> */}\n        {/* <Route exact path=\"/about\" element={ */}\n        {/* <About/> */}\n        {/* }/> */}\n        {/* <Route exact path=\"/\" element={ */}\n          <TextForm \n            showAlert={showAlert}  \n            mode={mode}\n            heading=\"Enter the text to analyze\" \n          />\n        {/* }/> */}\n      {/* </Routes> */}\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}